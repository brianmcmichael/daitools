{"version":3,"sources":["img/Dai126x126.png","components/PageHeader.jsx","components/RateCalculator.jsx","components/Main.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","PageHeader","props","Fragment","Header","as","icon","inverted","textAlign","Image","src","daiSmall","Subheader","Divider","math","create","all","number","precision","RateCalculator","useState","percent","setPercent","rate","percentageMultiplier","Math","pow","_pct","useEffect","Container","Card","fluid","Content","extra","Form","size","Grid","Column","width","offset","Input","label","labelPosition","onChange","e","data","value","className","pct","bignumber","console","log","toString","time","left","right","times","ceil","toFixed","rateCalculation","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,wC,mPCqB5BC,EAjBI,SAACC,GAClB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAI,EAACC,UAAQ,EAACC,UAAU,UACpC,kBAACC,EAAA,EAAD,CAAOC,IAAKC,MACZ,0CAGA,kBAACP,EAAA,EAAOQ,UAAR,+CAIJ,kBAACC,EAAA,EAAD,Q,+DCHAC,EAAOC,YAAOC,IARL,CAGbC,OAAQ,YAERC,UAAW,KAyFEC,EApFQ,SAACjB,GAAW,IAAD,EACFkB,mBAAS,GADP,mBACzBC,EADyB,KAChBC,EADgB,OAERF,qBAFQ,mBAEzBG,EAFyB,KAW1BC,GAX0B,KAKYC,KAAKC,IAAI,GAAI,IAM5B,SAACC,GAC5B,OAAQN,EAAU,IAAO,IAoC3B,OAJAO,qBAAU,cAEP,CAACP,EAASE,IAGX,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,OAAK,GACT,kBAACD,EAAA,EAAKE,QAAN,KACE,kBAACF,EAAA,EAAK1B,OAAN,yBAEF,kBAAC0B,EAAA,EAAKE,QAAN,CAAcC,OAAK,GAAnB,KACKT,IADL,+BAGA,kBAACM,EAAA,EAAKE,QAAN,KAEE,kBAACE,EAAA,EAAD,CAAMC,KAAK,SACT,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,CAAaC,MAAO,EAAGC,OAAQ,GAC7B,kBAACC,EAAA,EAAD,CACEC,MAAM,IACNC,cAAc,QACdC,SA1DS,SAACC,EAAGC,GAC3BvB,EAAWuB,EAAKC,QA0DFA,MAAOzB,EACPU,OAAK,KAET,kBAACK,EAAA,EAAKC,OAAN,CAAaC,MAAO,GAClB,kBAACE,EAAA,EAAD,CACET,OAAK,EACLgB,UAAU,aACVD,MArDQ,WAItB,IAAIE,EAAMlC,EAAKmC,UAAUzB,KAEzB0B,QAAQC,IAAIH,EAAII,YAEhB,IAAIC,EAAOvC,EAAKmC,UAAW,EAAE,SAC7BC,QAAQC,IAAIE,EAAKD,YAEjB,IAAIE,EAAON,EAAItB,IAAI2B,GACnBH,QAAQC,IAAIG,EAAKF,YAEjB,IACIG,EADMzC,EAAKmC,UAAU,IACTvB,IAAI,IAMpB,OALAwB,QAAQC,IAAII,GAECD,EAAKE,MAAMD,GAGVE,OAAOC,UAAUN,WAgCVO,YCzEVC,EATF,SAAC1D,GACZ,OACE,kBAAC2B,EAAA,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIOgC,MARf,WACE,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,QCGce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.3cb4379f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Dai126x126.76a77e86.png\";","import React from 'react';\nimport { Divider, Header, Image } from 'semantic-ui-react'\nimport daiSmall from '../img/Dai126x126.png';\n\nconst PageHeader = (props) => {\n  return (\n    <React.Fragment>\n      <Header as='h2' icon inverted textAlign='center'>\n          <Image src={daiSmall} />\n          <div>\n          Dai Tools\n          </div>\n          <Header.Subheader>\n          Tools for Smart (Contract) Developers\n          </Header.Subheader>\n      </Header>\n      <Divider />\n    </React.Fragment>\n  )\n}\n\nexport default PageHeader\n","import React, { useState, useEffect } from 'react';\nimport { Card, Container, Form, Grid, Input } from 'semantic-ui-react';\nimport { create, all } from 'mathjs';\n\n// configure the default type of numbers as BigNumbers\nconst config = {\n  // Default type of number\n  // Available options: 'number' (default), 'BigNumber', or 'Fraction'\n  number: 'BigNumber',\n  // Number of significant digits for BigNumbers\n  precision: 45,\n\n}\nconst math = create(all, config)\n\nconst RateCalculator = (props) => {\n  const [percent, setPercent] = useState(8);\n  const [rate, setRate] = useState();\n\n  // ((1.08)^(1/(365*24*60*60)))*10^27\n  const annualExponent = (1/(365*24*60*60)) * Math.pow(10, 27);\n\n  const updatePercentage = (e, data) => {\n    setPercent(data.value);\n  }\n\n  const percentageMultiplier = (_pct) => {\n    return (percent / 100) + 1;\n  }\n\n  const updateRate = (e, data) => {\n    console.log(data.value)\n    setRate(data.value);\n  }\n\n  const rateCalculation = () => {\n    // TODO Refactor this mess\n\n    // ((1.09)^(1/(365*24*60*60)))*10^27\n    let pct = math.bignumber(percentageMultiplier(percent));\n    //let pct = new Decimal(percentageMultiplier(percent));\n    console.log(pct.toString());\n    //let time = (1/(365*24*60*60));\n    let time = math.bignumber((1/(365*24*60*60)));\n    console.log(time.toString())\n\n    let left = pct.pow(time);\n    console.log(left.toString());\n\n    let ten = math.bignumber(10);\n    let right = ten.pow(27);\n    console.log(right);\n\n    let result = left.times(right);\n\n    // 1000000002440418608258399990\n    return result.ceil().toFixed().toString();\n  }\n\n  useEffect(() => {\n    //console.log(percent);\n  }, [percent, rate]);\n\n  return (\n    <Container>\n      <Card fluid>\n        <Card.Content>\n          <Card.Header>Rate Calculator</Card.Header>\n        </Card.Content>\n        <Card.Content extra>\n          (({percentageMultiplier(percent)})^(1/(365*24*60*60)))*10^27\n        </Card.Content>\n        <Card.Content>\n\n          <Form size='large'>\n            <Grid>\n              <Grid.Column width={3} offset={1}>\n                <Input\n                  label=\"%\"\n                  labelPosition=\"right\"\n                  onChange={updatePercentage}\n                  value={percent}\n                  fluid />\n              </Grid.Column>\n              <Grid.Column width={9}>\n                <Input\n                  fluid\n                  className=\"text-right\"\n                  value={rateCalculation()}\n                />\n              </Grid.Column>\n            </Grid>\n          </Form>\n        </Card.Content>\n      </Card>\n    </Container>\n  )\n}\n\nexport default RateCalculator\n","import React from 'react';\nimport { Container } from 'semantic-ui-react'\nimport PageHeader from './PageHeader';\nimport RateCalculator from './RateCalculator';\n\n\nconst Main = (props) => {\n  return (\n    <Container>\n        <PageHeader />\n        <RateCalculator />\n    </Container>\n  )\n}\n\nexport default Main\n","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css'\nimport { ethers } from 'ethers';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}